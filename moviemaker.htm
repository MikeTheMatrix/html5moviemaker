<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8" />        
<script>
var movie;

window.onload = function(){

	var characterCanvas = document.getElementById("character-canvas");
	var sceneCanvas = document.getElementById("scene-canvas");
	var controlsCanvas = document.getElementById("scene-controls");
	movie = {id: 0, 
		colors: ["#FFFFFF", "#808080", "#FF0000", "#FFFF00", 
              "#00FF00", "#00FFFF", "#0000FF", "#800080"],
		controls: {playButtonWidth: 40, 
			  canvas: controlsCanvas,
			  context: controlsCanvas.getContext("2d")
		},
		scene: {length: 0,
		  position: 0,
		  dialog: {list: [], showingList: [], i: 0},
		  soundtrack: {currentColor: 0, channels: []},
		  paused: false,
		  mode: "VIEW",
		  canvas: sceneCanvas, 
		  context: sceneCanvas.getContext("2d"),
  		  canvasOffsetLeft: sceneCanvas.offsetLeft + sceneCanvas.parentElement.offsetLeft,
		  canvasOffsetTop: sceneCanvas.offsetTop + sceneCanvas.parentElement.offsetTop
		},
		character: {current: -1,
		  list: [], 
		  currentColor: 0,
		  drawingCharacter: {paths: []},
		  canvas: characterCanvas,
		  centerX: characterCanvas.clientWidth/2,
		  centerY: characterCanvas.clientHeight/2,
		  canvasOffsetLeft: characterCanvas.offsetLeft
			+ characterCanvas.parentElement.offsetLeft ,
		  canvasOffsetTop: characterCanvas.offsetTop 
			+ characterCanvas.parentElement.offsetTop 
		}
	};
	characterCanvas.getContext("2d").lineWidth = 6;
//	movie.scene.context.lineWidth = 6;
	var tool = new tool_pencil();	
	characterCanvas.addEventListener("mousedown", tool.mousedown, false);
	characterCanvas.addEventListener("mousemove", tool.mousemove, false);
	characterCanvas.addEventListener("mouseup",   tool.mouseup, false);
	characterCanvas.addEventListener("touchstart", tool.touchstart, false);
	characterCanvas.addEventListener("touchmove", tool.touchmove, false);
	characterCanvas.addEventListener("touchend",   tool.touchend, false);

	var tool2 = new tool_pencil2();	
	sceneCanvas.addEventListener("mousedown", tool2.mousedown, false);
	sceneCanvas.addEventListener("mousemove", tool2.mousemove, false);
	sceneCanvas.addEventListener("mouseup",   tool2.mouseup, false);
	sceneCanvas.addEventListener("touchstart", tool2.touchstart, false);
	sceneCanvas.addEventListener("touchmove", tool2.touchmove, false);
	sceneCanvas.addEventListener("touchend",   tool2.touchend, false);

	var tool3 = new tool_pencil3();	
	controlsCanvas.addEventListener("mousedown", tool3.mousedown, false);
	controlsCanvas.addEventListener("mousemove", tool3.mousemove, false);
	controlsCanvas.addEventListener("mouseup",   tool3.mouseup, false);
	controlsCanvas.addEventListener("touchstart", tool3.touchstart, false);
	controlsCanvas.addEventListener("touchmove", tool3.touchmove, false);
	controlsCanvas.addEventListener("touchend",   tool3.touchend, false);

	setupAudio();

	//if (window.location.search.length > 0){
	try {
		var search = window.location.search.search("id=");
		if (search > 0){
			var id = window.location.search.substring(search + 3);
			var xhr = new XMLHttpRequest();
			xhr.open("GET", "/a?id=" + id, true);
			xhr.onreadystatechange = function(){
				if (xhr.readyState == 4){
					var json = xhr.responseText;
					if (json != "bad"){
						loadString(json);
						movie.id = id;
						playButton();
					}
				}
			}
			xhr.send();
		}
		else {
			editButton();
			setTheScene();
		}
	}
	catch (e) {
		editButton();
		setTheScene();
	}
	//}

	drawControls();
}


function tool_pencil () {
	var canvas = movie.character.canvas;
	var context = canvas.getContext("2d");	
	var tool = this;
	this.started = false;
	this.drawnSegments = 0;
	this.drawnPaths = 0; 

	this.touchstart = function (ev) {
		ev.preventDefault(); 
		x = ev.targetTouches[0].pageX - movie.character.canvasOffsetLeft;
		y = ev.targetTouches[0].pageY - movie.character.canvasOffsetTop;
		tool.start(x, y);
	}
	this.touchmove = function (ev) {
		ev.preventDefault(); 
		x = ev.targetTouches[0].pageX - movie.character.canvasOffsetLeft;
		y = ev.targetTouches[0].pageY - movie.character.canvasOffsetTop;
		tool.move(x, y);
	}
	this.touchend = function (ev) {
		ev.preventDefault(); 
		tool.end();
	}

	this.mousedown = function (ev) {
		x = ev.pageX - movie.character.canvasOffsetLeft;
		y = ev.pageY - movie.character.canvasOffsetTop;
		tool.start(x, y);
	}
	this.start = function(x, y){

		tool.drawnPaths = movie.character.drawingCharacter.paths.length;
		movie.character.drawingCharacter.paths[tool.drawnPaths] = {color: movie.character.currentColor, 
				pxdata: [[x, y]],
		};

		context.strokeStyle = movie.colors[movie.character.currentColor];
		context.beginPath();
		context.moveTo(x, y);

		tool.started = true;

		tool.drawnSegments = 0;
		tool.drawnSegments++;
	};

	this.mousemove = function (ev) {
		x = ev.pageX - movie.character.canvasOffsetLeft;
		y = ev.pageY - movie.character.canvasOffsetTop;
		tool.move(x, y);
	}

	this.move = function(x, y){

		if (tool.started) {

			context.lineTo(x, y);
//			context.moveTo(x, y);
			context.stroke();
			movie.character.drawingCharacter.paths[tool.drawnPaths].pxdata[tool.drawnSegments] = [x, y];
			tool.drawnSegments++;
		}
	};

	this.mouseup = function (ev) {
		ev.preventDefault(); 
		tool.end();
	}

	this.end = function (){
		if (tool.started) {
			context.closePath();	
			tool.started = false;	      
			tool.drawnPaths++;
		}
	};
}

function tool_pencil2 () {
	var canvas = movie.scene.canvas;
	var context = movie.scene.context;	
	var tool = this;
	this.started = false;
	this.drawnSegments = 0;
	this.looperCounter = 0;

	this.touchstart = function (ev) {
		ev.preventDefault(); 
		movie.scene.canvasOffsetLeft = movie.scene.canvas.offsetLeft + movie.scene.canvas.parentElement.offsetLeft;
		movie.scene.canvasOffsetTop = movie.scene.canvas.offsetTop + movie.scene.canvas.parentElement.offsetTop;
		x = ev.targetTouches[0].pageX - movie.scene.canvasOffsetLeft;
		y = ev.targetTouches[0].pageY - movie.scene.canvasOffsetTop;
		tool.start(x, y);
	}
	this.touchmove = function (ev) {
		ev.preventDefault(); 
		x = ev.targetTouches[0].pageX - movie.scene.canvasOffsetLeft;
		y = ev.targetTouches[0].pageY - movie.scene.canvasOffsetTop;
		tool.move(x, y);
	}
	this.touchend = function (ev) {
		ev.preventDefault(); 
		tool.end();
	}

	this.mousedown = function (ev) {
		movie.scene.canvasOffsetLeft = movie.scene.canvas.offsetLeft + movie.scene.canvas.parentElement.offsetLeft;
		movie.scene.canvasOffsetTop = movie.scene.canvas.offsetTop + movie.scene.canvas.parentElement.offsetTop;
		x = ev.pageX - movie.scene.canvasOffsetLeft;
		y = ev.pageY - movie.scene.canvasOffsetTop;
		tool.start(x, y);
	}
	this.start = function(x, y){
		tool.started = true;
		if (movie.scene.mode == "CHARACTERS"){
			if (!currentCharacter()){
				tool.started = false;
				return;
			}

			var time = 0;
			movie.recordPastPlay = true;
			if (!movie.scene.animating){
				time = movie.scene.position;
				resume();
			}
			else {
				time = (new Date).getTime() - movie.scene.started;
			}
			currentCharacter().recordingStarted = time;
			var actions = movie.character.list[movie.character.current].actions;
			if (!actions){
				actions =[];
				movie.character.list[movie.character.current].actions = actions;
			}

			tool.loopCounter = (new Date).getTime() - time;

			var cuts = (currentCharacter().i < actions.length && 
				actions[currentCharacter().i][2] < time) ? 1 : 0;
			actions.splice(currentCharacter().i, cuts, [x, y, time]);			

		}
		else if (movie.scene.mode == "DIALOG"){
			var time;
			movie.recordPastPlay = true;
			if (!movie.scene.animating){
				time = movie.scene.position;
				resume();
			}
			else {
				time = (new Date).getTime() - movie.scene.started;
			}
			tool.loopCounter = (new Date).getTime() - time;
			var text = document.getElementById("dialog-input").value;
			tool.dialog = {"text": text, data: [[x, y, time]], i: 0};
			movie.scene.dialog.list[movie.scene.dialog.list.length] = tool.dialog;
			movie.scene.dialog.list.sort(function(a,b){return a.data[0][2] - b.data[0][2]});
		}
		else if (movie.scene.mode == "SOUNDTRACK"){
			soundtrackStartTouch(x, y, tool);
		}
	};

	this.mousemove = function (ev) {
		x = ev.pageX - movie.scene.canvasOffsetLeft;
		y = ev.pageY - movie.scene.canvasOffsetTop;
		tool.move(x, y);
	}

	this.move = function(x, y){
		if (tool.started) {
			if (movie.scene.mode == "CHARACTERS"){
				var actions = movie.character.list[movie.character.current].actions;
				var time = (new Date).getTime() - tool.loopCounter;
				var cuts = (currentCharacter().i+1 < actions.length && 
					actions[currentCharacter().i+1][2] < time) ? 1 : 0;
				actions.splice(currentCharacter().i+1, cuts, [x, y, time]);			
				currentCharacter().i++;
			}
			else if (movie.scene.mode == "DIALOG"){
				tool.dialog.data[tool.dialog.data.length] = [x, y, (new Date).getTime() - tool.loopCounter];
			}
			else if (movie.scene.mode == "SOUNDTRACK"){
				soundtrackTouchMove(x, y, tool);
			}
		}
	};

	this.mouseup = function (ev) {
		ev.preventDefault(); 
		tool.end();
	}

	this.end = function (){
		if (tool.started) {
			tool.started = false;
			if (movie.scene.mode == "CHARACTERS"){
				tool.drawnSegments++;

				var char = movie.character.list[movie.character.current];
				char.i = 0;
				char.recordingStarted = 0;
				movie.recordPastPlay = false;

				setTimeout(function(){
					if (!movie.scene.animating){
						playButton();
					}
				}, 20);

				tool.drawnPaths++;
			}
			else if (movie.scene.mode == "DIALOG"){
				tool.dialog.data[tool.dialog.data.length] = [-1, -1, (new Date).getTime() - tool.loopCounter];
				movie.recordPastPlay = false;
				setTimeout(function(){
					if (!movie.scene.animating){
						playButton();
					}
				}, 20);
			}
			else if (movie.scene.mode == "SOUNDTRACK"){
				soundtrackTouchEnd(tool);
			}
		}
	};
}

function soundtrackStartTouch(x, y, tool){
	var time;
	movie.recordPastPlay = true;
	if (!movie.scene.animating){
		time = movie.scene.position;
		resume();
	}
	else {
		time = (new Date).getTime() - movie.scene.started;
	}
	tool.loopCounter = (new Date).getTime() - time;

	tool.channel = {instrument: movie.scene.soundtrack.currentColor, data: [[x, y, time]], i: 0};
	movie.scene.soundtrack.channels[movie.scene.soundtrack.channels.length] = tool.channel;
	movie.scene.soundtrack.channels.sort(function(a,b){return a.data[0][2] - b.data[0][2]})

	if (movie.audio){
		var chan = makeChannel(movie.scene.soundtrack.currentColor);
		var freq = makeFreq(y) ;
		var panX = makePan(x);
		chan.osc.frequency.value = freq;
		chan.panner.setPosition(panX, 0, 0);
		chan.data[0] = {"freq": freq, "pan":panX};
		movie.audio.channels[movie.audio.channels.length] = chan;
		tool.audioChan = chan;
	}
}
function soundtrackTouchMove(x, y, tool){
	tool.channel.data[tool.channel.data.length] = [x, y, (new Date).getTime() - tool.loopCounter];
	if (movie.audio){
		var freq = makeFreq(y) ;
		var panX = makePan(x);
		tool.audioChan.osc.frequency.setValueAtTime(freq, 0);
		tool.audioChan.panner.setPosition(panX, 0, 0);
		tool.audioChan.data[tool.audioChan.data.length] = {"freq": freq, "pan":panX};
	}
}
function soundtrackTouchEnd(tool){
	tool.channel.data[tool.channel.data.length] = [-1, -1, (new Date).getTime() - tool.loopCounter];
	if (movie.audio){
		tool.audioChan.gain.gain.value = 0;
		tool.audioChan.data[tool.audioChan.data.length] = {"freq": -1, "pan": -1};
		tool.audioChan.recording = false;
	}

	movie.recordPastPlay = false;
	setTimeout(function(){
		if (!movie.scene.animating){
			playButton();
		}
	}, 20);
}

function tool_pencil3 () {
	var canvas = movie.scene.canvas;
	var context = movie.scene.context;	
	var tool = this;
	this.started = 0;
	this.drawnSegments = 0;
	this.looperCounter = 0;

	this.touchstart = function (ev) {
		ev.preventDefault(); 
		movie.scene.canvasOffsetLeft = movie.scene.canvas.offsetLeft + movie.scene.canvas.parentElement.offsetLeft;
		movie.scene.canvasOffsetTop = movie.scene.canvas.offsetTop + movie.scene.canvas.parentElement.offsetTop;
		x = ev.targetTouches[0].pageX - movie.scene.canvasOffsetLeft;
		y = ev.targetTouches[0].pageY - movie.scene.canvasOffsetTop;
		tool.start(x, y);
	}
	this.touchmove = function (ev) {
		ev.preventDefault(); 
		x = ev.targetTouches[0].pageX - movie.scene.canvasOffsetLeft;
		y = ev.targetTouches[0].pageY - movie.scene.canvasOffsetTop;
		tool.move(x, y);
	}
	this.touchend = function (ev) {
		ev.preventDefault(); 
		tool.end();
	}

	this.mousedown = function (ev) {
		movie.scene.canvasOffsetLeft = movie.scene.canvas.offsetLeft + movie.scene.canvas.parentElement.offsetLeft;
		movie.scene.canvasOffsetTop = movie.scene.canvas.offsetTop + movie.scene.canvas.parentElement.offsetTop;
		x = ev.pageX - movie.scene.canvasOffsetLeft;
		y = ev.pageY - movie.scene.canvasOffsetTop;
		tool.start(x, y);
	}
	this.mousemove = function (ev) {
		x = ev.pageX - movie.scene.canvasOffsetLeft;
		y = ev.pageY - movie.scene.canvasOffsetTop;
		tool.move(x, y);
	}
	this.mouseup = function (ev) {
		ev.preventDefault(); 
		tool.end();
	}

	this.start = function(x, y){
		
		if (x < movie.controls.playButtonWidth){
			tool.started = 1;
		}
		else {
			tool.started = 2;
			tool.wasPaused = movie.scene.paused;
			movie.scene.paused = true;

			var newPosition = x - movie.controls.playButtonWidth;
			newPosition = newPosition / (movie.controls.canvas.clientWidth - (movie.controls.playButtonWidth * 2));
			newPosition = Math.round(newPosition * movie.scene.length);
			movie.scene.started = (new Date).getTime() - newPosition;
			movie.scene.position = newPosition;
			movie.updateIs = true;
			if (!movie.scene.animating){
				animate();
			}
		}
	};

	this.move = function(x, y){
		if (tool.started == 2){
			var newPosition = x - movie.controls.playButtonWidth;
			newPosition = newPosition / (movie.controls.canvas.clientWidth - (movie.controls.playButtonWidth * 2));
			newPosition = Math.round(newPosition * movie.scene.length);
			movie.scene.started = (new Date).getTime() - newPosition;
			movie.scene.position = newPosition;
			movie.updateIs = true;
			if (!movie.scene.animating){
				animate();
			}
		}
	};

	this.end = function (){
		if (tool.started == 1 && x < movie.controls.playButtonWidth) {
			playButton();
		}
		else if (tool.started == 2){
			if (x < movie.controls.playButtonWidth){
				if (!tool.wasPaused){
					movie.scene.paused = false;
				}
			}
			else {
				var newPosition = x - movie.controls.playButtonWidth;
				newPosition = newPosition / (movie.controls.canvas.clientWidth - (movie.controls.playButtonWidth * 2));
				newPosition = Math.round(newPosition * movie.scene.length);
				movie.scene.started = (new Date).getTime() - newPosition;
				movie.scene.position = newPosition;
				movie.updateIs = true;
				movie.scene.paused = tool.wasPaused;
				if (movie.scene.paused){
					animate();
				}
			}
		}
		tool.started = 0;

	};
}


function play(){
	for (var ia = 0; ia < movie.character.list.length; ia++){
		if (movie.character.list[ia].actions.length > 0){
			movie.character.list[ia].i = 0;
			movie.character.list[ia].spriteI = 0;
			movie.character.list[ia].currentSprite = 0;
		}
	}
	if (movie.audio){
		for (var ia = 0; ia < movie.audio.channels.length; ia++){
			movie.audio.channels[ia].i = 0;
		}
	}	
	movie.scene.dialog.showingList = [];
	movie.scene.dialog.i = 0;
	movie.scene.started = (new Date).getTime() + 3000;
	movie.scene.animating = true;
	animate();
}
function resume(){
	movie.scene.paused = false;
	movie.scene.started = (new Date).getTime() - movie.scene.position;
	movie.scene.animating = true;
	animate();

}
function pause(){
	movie.scene.animating = false;
	movie.scene.paused = true;
}

function animate(){	

	setTheScene();
	var nowInLoop;
	if (movie.scene.paused){
		nowInLoop = movie.scene.position;
	}
	else {
		nowInLoop = (new Date).getTime() - movie.scene.started;
		movie.scene.position = nowInLoop;
	}

	if (nowInLoop < 0){
		drawCountIn(Math.abs(nowInLoop/1000));
	}
	else {	
		if (movie.updateIs){
			for (var ic = 0; ic < movie.character.list.length; ic++){
				var char = movie.character.list[ic];
				char.i = 0;
				char.spriteI = 0;
				char.currentSprite = 0;
				if (ic == movie.character.current){
					turnOnSprite(0);
				}
			}
			movie.scene.dialog.showingList = [];
			movie.scene.dialog.i = 0;
			if (movie.audio){
				for (var ia = 0; ia < movie.audio.channels.length; ia++){
					movie.audio.channels[ia].i = 0;
				}
			}	
			movie.updateIs = false;
		}
		for (var ic = 0; ic < movie.character.list.length; ic++){
			var char = movie.character.list[ic];

			if (char.actions.length > 0){
				var pxdata = char.actions;
				while (char.sprites && char.spriteI < char.spriteChanges.length && 
					char.spriteChanges[char.spriteI][1] < nowInLoop){
					char.currentSprite = char.spriteChanges[char.spriteI][0];
					if (ic == movie.character.current){
						turnOnSprite(char.currentSprite);
					}
					char.spriteI++;
				}
				if (!char.recordingStarted){
					while (char.i+1 < pxdata.length && pxdata[char.i+1][2] < nowInLoop){
						char.i++;
					}
				}
				drawCharacter(char, 
					pxdata[char.i][0], pxdata[char.i][1], movie.scene.context);
			}
		}
		var dialogs = movie.scene.dialog;
		while (dialogs.i < dialogs.list.length && dialogs.list[dialogs.i].data[0][2] < nowInLoop){
			dialogs.list[dialogs.i].i = 0;
			dialogs.showingList[dialogs.showingList.length] = 
				dialogs.list[dialogs.i];
			dialogs.i++;
		}
		for (var idlg = 0; idlg < dialogs.showingList.length; idlg++){
			var iii = dialogs.showingList[idlg].i + 1 ;
			while (iii < dialogs.showingList[idlg].data.length 
					&& dialogs.showingList[idlg].data[iii][2] < nowInLoop){
				iii++;
				dialogs.showingList[idlg].i++;
			}
			drawDialog(dialogs.showingList[idlg]);
		}
		if (nowInLoop > movie.scene.length){
			if (movie.recordPastPlay){
				movie.scene.length = movie.scene.position;
			}
			else {
				movie.scene.animating = false;
				if (movie.scene.mode == "VIEW"){
					document.getElementById("after-show").style.visibility = "visible";
				}
			}
		}
	}
	drawControls();
	if (movie.audio){
		updateAudioChannels(nowInLoop);
	}
	if (movie.scene.animating){
		requestAnimFrame(function() {
			animate();
		});
	}
}

function updateAudioChannels(nowInLoop){
	for (var ic = 0; ic < movie.scene.soundtrack.channels.length; ic++){
		var chan = movie.scene.soundtrack.channels[ic];
		var achan = movie.audio.channels[ic];
		if (!movie.scene.animating){
			achan.gain.gain.value = 0;
		}
		else if (!achan.recording){
			while (achan.i < chan.data.length && chan.data[achan.i][2] < nowInLoop){
				
				if (achan.data[achan.i].freq == -1){
					achan.gain.gain.value = 0;
				}
				else {
					achan.gain.gain.value = achan.defaultGain;
					achan.osc.frequency.setValueAtTime(achan.data[achan.i].freq, 0);
					achan.panner.setPosition(achan.data[achan.i	].pan, 0, 0);
				}
				achan.i++;
			}
			if (achan.i == chan.data.length || achan.i == 0){
				achan.gain.gain.value = 0;
			}
		}
	}
}

function drawDialog(dlg){
	if (dlg.i < dlg.data.length && dlg.data[dlg.i][0] > -1){
		var context = movie.scene.context;
		context.fillStyle = "white";
		context.lineWidth = 1;
		context.strokeStyle = "black";
		context.font = "13pt Arial Black";
		var tw = context.measureText(dlg.text).width;
		context.fillRect(-5 + dlg.data[dlg.i][0] - tw / 2, dlg.data[dlg.i][1]-30, tw+ 10, 50);
		context.strokeRect(-5 + dlg.data[dlg.i][0] - tw / 2, dlg.data[dlg.i][1]-30, tw + 10, 50);
		context.fillStyle = "black";
		context.fillText(dlg.text, dlg.data[dlg.i][0] - tw / 2, dlg.data[dlg.i][1]);
	}
}
	
function drawControls(){
	var ctx = movie.controls.context;
	var playWidth = movie.controls.playButtonWidth;
	var cHeight = movie.controls.canvas.height;
	ctx.shadowBlur = 10;
	ctx.shadowColor = "black";

	ctx.clearRect(0, 0, movie.controls.canvas.width, movie.controls.canvas.height);	
	ctx.fillStyle = "white";
	ctx.fillRect(0, 0, movie.controls.playButtonWidth, movie.controls.canvas.height);
	ctx.fillStyle = "black";
	ctx.strokeStyle = "black";
	if (movie.scene.animating){
		ctx.fillRect(playWidth * 0.175, cHeight * 0.25, playWidth * 0.25, cHeight * 0.5);
		ctx.fillRect(playWidth * 0.575, cHeight * 0.25, playWidth * 0.25, cHeight * 0.5);	}
	else {
		ctx.beginPath();
		ctx.moveTo(playWidth * 0.25, movie.controls.canvas.height * 0.25);
		ctx.lineTo(playWidth * 0.25, movie.controls.canvas.height * 0.75);
		ctx.lineTo(playWidth * 0.75, movie.controls.canvas.height * 0.5);
		ctx.closePath();
		ctx.fill();
	}

	var newPosition = movie.controls.canvas.clientWidth - (movie.controls.playButtonWidth * 2);
	newPosition = newPosition * (movie.scene.position / movie.scene.length);
	newPosition += movie.controls.playButtonWidth;
	newPosition = Math.min(newPosition, movie.controls.canvas.width - movie.controls.playButtonWidth);
	if (newPosition > playWidth){
		movie.controls.context.fillStyle = "yellow";
		movie.controls.context.fillRect(newPosition, 0, movie.controls.playButtonWidth, movie.controls.canvas.height);
	}
//	movie.controls.context.fillStyle = "black";
//	movie.controls.context.font = "6pt";
//	movie.controls.context.fillText(Math.round(movie.scene.position / 1000) + "sec", newPosition+3, 9);
//	movie.controls.context.fillText(Math.round(movie.scene.length / 1000) + "sec", newPosition+3, 30);
}

function addCharacter(template){
	turnOffCharacters();
	if (template){
		movie.character.list[movie.character.list.length] = template;
	}
	else {
		movie.character.list[movie.character.list.length] = movie.character.drawingCharacter;
	}
	movie.character.current++;
	clearCharacterCanvas();
	document.getElementById("draw-characters").style.visibility = "hidden";
	makeCharacterButton(movie.character.current);
	
}
function addCharacterFromFile(template){
	var img = new Image();
	var src = document.getElementById("char-filename").value;
	if (template){
		if (template.src){
			src = template.src;			
		}
		else {
			src = template;
		}
	}
	img.src = src;
	img.onload = function(){
		turnOffCharacters();

		var charI = movie.character.list.length;
		movie.character.current = charI;
		movie.character.list[charI] = 
			{sprites: [img], currentSprite:0, spriteI:0, spriteChanges: [],
				i:0, actions:[],
				centerX: img.width / 2, 
				centerY: img.height / 2,
				"src":src};
		if (template && template.src){
			currentCharacter().spriteChanges = template.spriteChanges;
			currentCharacter().actions = template.actions;
		}

		var srcSearch = src.search("_1");
		if (srcSearch > 0){
			var getNextSprite = function(nextSprite){
				var src2  = src.substr(0, srcSearch) + "_" + nextSprite + ".png";
				var img2 = new Image();
				img2.src = src2;
				img2.onload = function(){
					movie.character.list[charI].sprites[nextSprite - 1] = img2;
					loadSprites(charI);

					getNextSprite(nextSprite + 1);
				};
			};
			getNextSprite(2);
		}
		makeCharacterButton(charI);
	}
}

function makeCharacterButton(n, img){


	var newItem = document.createElement("div");
	newItem.setAttribute("class", "character");
	document.getElementById("character-list").appendChild(newItem);
	var newCanvas = document.createElement("canvas");
	newCanvas.setAttribute("id", "char-canvas" + n);
	newCanvas.setAttribute("onclick", "recallCharacter(" + n + ")");
	newCanvas.setAttribute("class", "char-canvas"); 
	newItem.appendChild(newCanvas);
	newCanvas.height = 80;
	newCanvas.width = 60;
	turnOnCharacter(movie.character.current);

	drawCharacter(movie.character.list[n], newCanvas.width / 2, newCanvas.height, newCanvas.getContext("2d"));
}

function addSanta(){
	addCharacterFromFile("img/santa_1.png");
	addCharacterFromFile("img/elf_1.png");
	document.getElementById("scene-script").value = 
		"//draw the sky \nmovie.scene.context.fillStyle  = 'skyblue'" +
	"\nmovie.scene.context.fillRect(0, 0, 800, 300)\n//draw the ground" +
	"\nmovie.scene.context.fillStyle = 'white';\nmovie.scene.context.fillRect(0, 300, 800, 400)";
	setTheScene();

	
}

function turnOffSprites(){
	for (var ic = 0; ic < movie.character.list.length; ic++){
		document.getElementById("sprite-canvas" + ic).parentElement.style.borderWidth = "0px";
		document.getElementById("sprite-canvas" + ic).parentElement.style.margin = "8px";
	}
}
function turnOnSprite(ic){
	turnOffSprites();
	document.getElementById("sprite-canvas" + ic).parentElement.style.borderWidth = "8px";
	document.getElementById("sprite-canvas" + ic).parentElement.style.margin = "0px";
}


function turnOffCharacters(){
	for (var ic = 0; ic < movie.character.list.length; ic++){
		document.getElementById("char-canvas" + ic).parentElement.style.borderWidth = "0px";
		document.getElementById("char-canvas" + ic).parentElement.style.margin = "8px";
	}
}
function turnOnCharacter(ic){
	document.getElementById("char-canvas" + ic).parentElement.style.borderWidth = "8px";
	document.getElementById("char-canvas" + ic).parentElement.style.margin = "0px";
}

function recallCharacter(n){
	movie.character.current = n;
	turnOffCharacters();
	turnOnCharacter(n);
	loadSprites(n);
}

function loadSprites(n){
	document.getElementById("sprites").innerHTML = "Sprites for current character:";
	for (var is = 0; is < movie.character.list[n].sprites.length; is++){
		var newItem = document.createElement("div");
		newItem.innerHTML = "<canvas onclick='setSprite(" + 
			is + ")' id='sprite-canvas" + is + 
			"' class='sprite-canvas'></canvas>"; 
		newItem.setAttribute("class", "sprite");
		document.getElementById("sprites").appendChild(newItem);
		document.getElementById("sprite-canvas" + is).getContext("2d").drawImage(
			movie.character.list[n].sprites[is], 0, 0);
	}
	if (currentCharacter() && currentCharacter().sprites){
		turnOnSprite(currentCharacter().currentSprite);
	}
}

function setSprite(n){
	turnOnSprite(n);
	currentCharacter().spriteChanges[currentCharacter().spriteChanges.length] = [n, movie.scene.position - 1];
	currentCharacter().spriteChanges.sort(function(a,b){return a[1]-b[1];})
	currentCharacter().currentSprite = n;
	if (movie.scene.paused || !movie.scene.animating){
		animate();
	}
}

function clearCharacterCanvas(){
	movie.character.drawingCharacter = {paths:  []};
	movie.character.canvas.getContext("2d").clearRect(0, 0, movie.character.canvas.width, movie.character.canvas.height);	
}

function setTheScene(){
	if (movie.scene.backdrop){
		movie.scene.context.drawImage(movie.scene.backdrop, 0, 0, 800, 400);
	}
	else {
		try {
			eval(document.getElementById("scene-script").value);
		}
		catch (e) {
		}
	}
}

function drawCharacter(char, x, y, context){
	if (char.sprites){
		context.drawImage(char.sprites[char.currentSprite], x - char.centerX, y - char.centerY);
	}
	else {
		context.lineWidth = 6;

		for (var i = 0; i < char.paths.length; i++){
			context.strokeStyle = movie.colors[char.paths[i].color];
			context.beginPath();
			context.moveTo(char.paths[i].pxdata[0][0] + x - movie.character.centerX, 
					char.paths[i].pxdata[0][1] + y - movie.character.centerY);
			for (var j = 1; j < char.paths[i].pxdata.length; j++){
				context.lineTo(char.paths[i].pxdata[j][0] + x - movie.character.centerX, 
						char.paths[i].pxdata[j][1] + y - movie.character.centerY);
				context.moveTo(char.paths[i].pxdata[j][0] + x - movie.character.centerX, 
						char.paths[i].pxdata[j][1] + y - movie.character.centerY);
			}
			context.closePath();
			context.stroke();
		}
	}
}

function drawCountIn(n){
	movie.scene.context.font = "bold 18pt Arial Black";
	movie.scene.context.fillStyle = "black";
	movie.scene.context.fillRect(0, 0, 75, 75);
	movie.scene.context.fillStyle = "grey";
	movie.scene.context.fillRect(0, 0, 75 * (Math.ceil(n) - n), 75);
	movie.scene.context.fillStyle = "white";
	movie.scene.context.fillText( Math.ceil(n), 30, 50);
}

function chooseColor(color){
	var offs = 5;
	if (movie.character.currentColor > -1){ 
		var oldColor = document.getElementById("color-" + movie.character.currentColor);
		oldColor.style.borderWidth = "1px";
		//  var newLeft = oldColor.style.left + 3;
		//  oldColor.style.left = newLeft + "px";
		oldColor.style.borderColor = "#808080";
		oldColor.style.zIndex = 0;
	}
	var newColor = document.getElementById("color-" + color);
	newColor.style.borderWidth = "3px";
	//  var newLeft2 = newColor.style.left - 3;
	//  newColor.style.left = newLeft2;
	newColor.style.borderColor = "#FFFFFF";
	newColor.style.zIndex = 1;
	movie.character.currentColor = color;


}

window.requestAnimFrame = (function(callback) {
	return window.requestAnimationFrame || 
	window.webkitRequestAnimationFrame || 
	window.mozRequestAnimationFrame || 
	window.oRequestAnimationFrame || 
	window.msRequestAnimationFrame || 
	function(callback) {
		window.setTimeout(callback, 1000 / 60);
	};
})();

function clearActions(){
	movie.scene.animating = false;
	movie.scene.length = 0;
	for (var ic = 0; ic < movie.character.list.length; ic++){
		movie.character.list[ic].actions = [];
	}
	setTheScene();
}

function undoCharacterCanvas(){
	var char = movie.character.list[movie.character.current];
	if (char.paths.length > 0){
		char.paths = char.paths.slice(0, char.paths.length - 1);
		var ctx = movie.character.canvas.getContext("2d");
		ctx.clearRect(0, 0, movie.character.canvas.width, movie.character.canvas.height);
		drawCharacter(currentCharacter(), movie.character.centerX, movie.character.centerY, ctx);
	}
}
function currentCharacter(){
	return movie.character.list[movie.character.current];
}

function getTheCode(){
	document.getElementById("movie-script").value = getJSON();
}

function getJSON(){
	var mov = {length: movie.scene.length, characters: [], 
			scene: document.getElementById("scene-script").value,
			dialog: movie.scene.dialog};
	if (movie.scene.backdrop){
		mov.backdrop = movie.scene.backdropSource;
	}
	for (var ic = 0; ic < movie.character.list.length; ic++){
		mov.characters[ic] = {actions: movie.character.list[ic].actions,
			spriteChanges: movie.character.list[ic].spriteChanges,
			src: movie.character.list[ic].src,
			paths: movie.character.list[ic].paths};
	}
	mov.soundtrack = movie.scene.soundtrack;
	return JSON.stringify(mov);
}


function loadString(s){
	var mov = JSON.parse(s);
	movie.scene.length = mov.length;
	movie.scene.position = mov.length;
	movie.character.list = [];
	document.getElementById("character-list").innerHTML = "";
	movie.scene.soundtrack = mov.soundtrack;
	if (movie.audio){
		loadAudio();
	}

	movie.scene.dialog.list = mov.dialog.list;
	for (var ic = 0; ic < mov.characters.length; ic++){
		if (mov.characters[ic].src){
			addCharacterFromFile(mov.characters[ic]);
		}
		else {
			addCharacter(mov.characters[ic]);
		}
	}
	document.getElementById("scene-script").value = mov.scene;
	if (mov.backdrop){
		addBackdrop(mov.backdrop);
	}
}

function loadAudio(){
	for (var ic = 0; ic < movie.scene.soundtrack.channels.length; ic++){
		var ch = movie.scene.soundtrack.channels[ic];
		var chan = makeChannel(ch.instrument);
		chan.gain.gain.value = 0;
		for (var icd = 0; icd < ch.data.length; icd++){
			var freq = makeFreq(ch.data[icd][1]) ;
			var panX = makePan(ch.data[icd][0]);
			chan.osc.frequency.value = freq;
			chan.panner.setPosition(panX, 0, 0);
			chan.data[icd] = {"freq": freq, "pan":panX};
		}
		movie.audio.channels[movie.audio.channels.length] = chan;
		chan.recording = false;
	}
}

function charactersButton(){
	movie.scene.mode = "CHARACTERS";
	turnOffButtons();
	document.getElementById("characters-button").style.backgroundColor = "white";
	document.getElementById("characters").style.display = "block";
}
function setTheSceneButton(){
	movie.scene.mode = "SCENE";
	turnOffButtons();
	document.getElementById("set-the-scene-button").style.backgroundColor = "white";
	document.getElementById("set-the-scene").style.display = "block";
}
function dialogButton(){
	movie.scene.mode = "DIALOG";
	turnOffButtons();
	document.getElementById("dialog-button").style.backgroundColor = "white";
	document.getElementById("dialog").style.display = "block";
}
function soundtrackButton(){
	movie.scene.mode = "SOUNDTRACK";
	turnOffButtons();
	document.getElementById("soundtrack-button").style.backgroundColor = "white";
	document.getElementById("soundtrack").style.display = "block";
	if (!movie.audio){
		document.getElementById("no-web-audio").style.visibility = "visible";
		document.getElementById("soundtrack-instructions").style.visibility = "hidden";
	}
}
function shareButton(){
	movie.scene.mode = "SHARE";
	turnOffButtons();
	document.getElementById("share-button").style.backgroundColor = "white";
	document.getElementById("share").style.display = "block";
	save();
}
function turnOffButtons() {
	document.getElementById("characters-button").style.backgroundColor = "#DEDEDE";
	document.getElementById("set-the-scene-button").style.backgroundColor = "#DEDEDE";
	document.getElementById("dialog-button").style.backgroundColor = "#DEDEDE";
	document.getElementById("share-button").style.backgroundColor = "#DEDEDE";
	document.getElementById("soundtrack-button").style.backgroundColor = "#DEDEDE";

	document.getElementById("characters").style.display = "none";
	document.getElementById("set-the-scene").style.display = "none";
	document.getElementById("dialog").style.display = "none";
	document.getElementById("soundtrack").style.display = "none";
	document.getElementById("share").style.display = "none";
}

function showDrawCharactersButton(){
	document.getElementById("draw-characters").style.visibility="visible";
}

function playButton(){
	if (movie.scene.animating){
		pause();
	}
	else {
		document.getElementById("after-show").style.visibility = "hidden";
		if (movie.scene.position < movie.scene.length){
			resume();
		}
		else {
			play();
		}
	}
}

function save(){
	var json = getJSON();

	document.getElementById("get-json").value = json;

	var xhr = new XMLHttpRequest();
	xhr.open("POST", "/a", true);
	xhr.onreadystatechange = function(){
		if (xhr.readyState == 4){

			var id = xhr.responseText;
			if (id != "bad"){
				document.getElementById("new-animation-share").value = "http://yougotadoodle.appspot.com/moviemaker.htm?id=" + id;
//				movie.id = id;
			}
		}
	}
	xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
	var params = "json=" + json;		
	xhr.send(params);
}

function addBackdrop(filename){
	var backdrop = filename;
	if (!filename){
		backdrop = document.getElementById("backdrop-file").value;
	} 
	var img = new Image();
	img.src = backdrop;
	img.onload = function(){
		movie.scene.backdrop = img;
		movie.scene.backdropSource = backdrop;
		setTheScene();
	}
}

function editButton(){
	document.getElementById("area1").style.display = "block";
	document.getElementById("sprites").style.display = "block";
	movie.scene.mode = "CHARACTERS";
	document.getElementById("after-show").style.visibility = "hidden";
}


function setupAudio(){
	try {
		var acontext = new webkitAudioContext();
		movie.audio = {context: acontext, channels: [],
			ascale: [0,2,4,5,7,9,11], octaves:4, base:36};

		movie.hasAudio = true;
	}
	catch(e) {
	}
}

function makeFreq(y){
	return buildFrequency(movie.audio.ascale, movie.audio.octaves, 1 - y / movie.scene.canvas.height, movie.audio.base);	
}
function makePan(x){
	return (x / movie.scene.canvas.width - 0.5) * 10;
}
//translated from Adam Smith's Android code
function buildScale(quantizerString) {
    if (quantizerString != null && quantizerString.length > 0) 
    {
        var parts = quantizerString.split(",");
        var scale = []; //new float[parts.length];
        for (var i = 0; i < parts.length; i++) {
            scale[i] = parseFloat(parts[i]);
        }
        return scale;
    } else {
        return null;
    }
}
function buildFrequency(scale, octaves, input, base) {
	input = Math.min(Math.max(input, 0.0), 1.0);
	var mapped = 0;
	if (scale == null) {
		mapped = base + input * octaves * 12.0;
	} else {
		var idx = Math.floor((scale.length * octaves + 1) * input);
		mapped = base + scale[idx % scale.length] + 12 * Math.floor(idx / scale.length);
	}
	return Math.pow(2, (mapped - 69.0) / 12.0) * 440.0;
}

function makeChannel(color){
	var info = getInstrumentInfo(color);
	var chan = 	{};
	var acontext = movie.audio.context;
	chan.data = [];
	chan.i = 0;
	chan.muted = false;
	chan.defaultGain = 0.4;
	chan.osc = acontext.createOscillator();
	chan.gain = acontext.createGainNode();
	chan.delay = acontext.createDelayNode();
	chan.delayGain = acontext.createGainNode();
	chan.panner = acontext.createPanner();
	chan.gain.gain.value = chan.defaultGain; 
	chan.delayGain.gain.value = 0.3;
	chan.osc.connect(chan.gain);
	chan.gain.connect(chan.panner);
	chan.panner.connect(acontext.destination);

	chan.osc.type = info.type;

	if (info.delay){
		chan.delay.delayTime.value = 0.5;
		chan.gain.connect(chan.delay);
		chan.delay.connect(chan.delayGain);
		chan.delayGain.connect(acontext.destination);
	}
	chan.osc.noteOn(0);
	chan.recording = true;
	return chan;
}
function getInstrumentInfo(color){
    var instrumentType = 0;
    var ldelay = false;
	var softEnvelope = false; // TODO slow attack and sustain if true
    if (color == 0) {
		ldelay = true;
		softEnvelope = true;
    } 
    else if (color == 1) {
    } 
    else if (color == 2) {
		softEnvelope = true;
		instrumentType = 1;
    } 
    else if (color == 3) {
		instrumentType = 1;
    } 
    else if (color == 4) {
		softEnvelope = true;
		instrumentType = 1;
    } 
    else if (color == 5) {
		instrumentType = 1;
    } 
    else if (color == 6) {
		softEnvelope = true;
		instrumentType = 1;
		ldelay = true;
    } 
    else if (color == 7) {
		softEnvelope = true;
		instrumentType = 2;
    } 
    else if (color == 8) {
		instrumentType = 2;
    } 
    else if (color == 9) {
		instrumentType = 2;
		ldelay = true;
		softEnvelope = true;    } 
    else if (color == 10) {
	instrumentType = 2;
	ldelay = true;
    } 
	return {type: instrumentType, delay: ldelay, soft: softEnvelope};
}

function chooseInstrument(color){
  var offs = 5;
  if (movie.scene.soundtrack.currentColor > -1){ 
  var oldColor = document.getElementById("inst-" + movie.scene.soundtrack.currentColor);
  oldColor.style.borderWidth = "1px";
//  var newLeft = oldColor.style.left + 3;
//  oldColor.style.left = newLeft + "px";
  oldColor.style.borderColor = "#808080";
  oldColor.style.zIndex = 0;
  }
  var newColor = document.getElementById("inst-" + color);
  newColor.style.borderWidth = "3px";
//  var newLeft2 = newColor.style.left - 3;
//  newColor.style.left = newLeft2;
  newColor.style.borderColor = "#FFFFFF";
  newColor.style.zIndex = 1;
  movie.scene.soundtrack.currentColor = color;


}

function load(){
	loadString(document.getElementById('load-json').value);
	setTimeout(function() {play(); }, 400);
}

function facebookButton(){
	share('http://www.facebook.com/sharer/sharer.php?t=YouGotADoodle&u=http%3A%2F%2Fyougotadoodle.appspot.com%2Fmoviemaker.htm');
}
function twitterButton(){
	share( "http://twitter.com/home?status=http%3A%2F%2Fyougotadoodle.appspot.com%2Fmoviemaker.htm");
}
function emailButton(){
	var url = 'mailto:?subject=You Got A Moving Music Doodle!&body=http://yougotadoodle.appspot.com/moviemaker.htm';
	share(url);
}
function share(url){
	
	if (movie.scene.length == 0 || movie.id == 0){
		//url = ;
		window.location = url; 

	}
	else {
		url = url + '%3Fid%3D' + movie.id ;
		//var newWindow = window.open(url, "share"); 
		window.location = url; 
	}
}

</script>



<style>
body {margin:0px; font:12pt Arial Black;}
#page {margin:auto; width:800px;}
h1 {font-size:14pt; margin:-3px; text-align:center;}
#character-canvas {height:200px; 
	width:150px;
	background-color:black;}
.char-canvas {height:80px; 
	width:60px;
	background-color:black;}
.character {margin:8px; height:80px; width:60px; float:left;
	border-width:0px;
	border-color:#FF0000;
	border-style:solid;
	border-radius:5px;
}
#character-list {position:absolute; height:96px; left:300px; top:50px; width:490px;
	border-width:1px;
	border-color:#000000;
	border-style:solid;
	border-radius:2px;
}

.sprite-canvas {height:100px; 
	width:75px;
	background-color:black;}
.sprite {margin:8px; height:100px; width:75px; 
	border-width:1px;
	border-style:solid;
	border-color:#FF0000;
	border-radius:5px;
}

#scene-canvas {height:400px; 
	width:800px;
	background-color:black;}
#scene-script {height:98px; 
	width:480px;
}

.color_box {
	line-height:10px;
	font-size:8pt;
	text-align:center;
	position:absolute;
	height:33px;
	width:33px;
	border-width:1px;
	border-color:#808080;
	border-style:solid;
	border-radius:5px;
}
#colors {position:absolute; left:156px; top:25px; color:black;}
#color-0{left:0px;top:0px;background-color:#FFFFFF;}#color-1{left:0px;top:35px;background-color:#FF0000;}
#color-2{left:0px;top:70px;background-color:#FFFF00;}#color-3{left:0px;top:105px;background-color:#00FF00;}
#color-4{left:34px;top:0px;background-color:#0000FF;}#color-5{left:34px;top:35px;background-color:#FF8000;}
#color-6{left:34px;top:70px;background-color:#9E9E9E;}#color-7{left:34px;top:105px;background-color:#00FFFF;}

	
.area, .step {display:none;
	width:1000;
	border-width:1px;
	border-color:#808080;
	border-style:solid;
	border-radius:5px;
	background-color:#DEDEDE;
	padding:7px;
	position:relative;
}


#set-the-scene { display:none;}
#dialog,#soundtrack,#share {display:none;}


#draw-characters{position:absolute; top:80px; left:20px; width:250px; visibility:hidden;
	border-width:1px;
	border-color:#808080;
	border-style:solid;
	border-radius:5px;
	background-color:#DEDEDE;
	padding:7px;
}




#file{position:absolute; top:39px; left:220px;}

#scene-view {position:relative;}
#sprites {position:absolute; left:810px; top:5px; }

.area1controls {position:absolute; right:2px; top:2px; 
	}
.button {float:left; background-color:#DEDEDE;
	padding:10px; margin:2px;
	border-width:1px; border-radius:3px; border-color:black; border-style:solid;}

#after-show {position:absolute; top:200px; left:250px; visibility:hidden;}


#scene-controls {width:800px; height:40px; background-color:#707070;}

#dialog-input {width:300px; }
.thin-black-border {border-width:1px; border-color:black; border-style:solid;}
.hideme {display:none;}

#no-web-audio {color:red; visibility:hidden; }
#instruments {position:relative; height:40px;}
.inst_box {
	line-height:10px;font-size:8pt;text-align:center;position:absolute;
	height:33px;width:33px;
	border-width:1px;border-color:#808080;border-style:solid;border-radius:5px;
}
#inst-0{left:0px;top:0px;background-color:#FFFFFF;} #inst-1{left:35px;top:0px;background-color:#FF0000;}
#inst-2{left:70px;top:0px;background-color:#FFFF00;} #inst-3{left:105px;top:0px;background-color:#00FF00;}
#inst-4{left:140px;top:0px;background-color:#0000FF;} #inst-5{left:175px;top:0px;background-color:#FF8000;}
#inst-6{left:210px;top:0px;background-color:#9E9E9E;} #inst-7{left:245px;top:0px;background-color:#00FFFF;}
#inst-8{left:280px;top:0px;background-color:#800080;} #inst-9{left:315px;top:0px;background-color:#632DFF;}
#inst-10{left:350px;top:0px;background-color:#63FF08;}

#bymonadpad {position:absolute; right:5px; bottom:5px; font-size:9pt;}

#facebook_button {background-image:url('img/f_logo.png'); 
	height:42px;width:42px;top:0px;left:35px;padding:0px;}
#twitter_button {background-image:url('img/twitter_logo.png');
	background-color:#FFFFFF; height:42px;width:42px;top:0px;left:82px;padding:0px;}
#email_button {background-image:url('img/email.png');
	background-color:#FF80FF; height:42px;width:42px;top:0px;left:128px;padding:0px;}
#sbuttons {padding:10px; margin:2px; height:45px; top:10px; position:relative;}
.sbutton {padding:10px; margin:2px;position:absolute;
	border-width:1px; border-radius:3px; border-color:black; border-style:solid;}

</style>
</head>




<body>
<div id="page">
<h1 class="hideme">Doodlemation Studio (v0.6)</h1>

<div id="scene-view" >
<canvas class="thin-black-border" height="400" width="800" id="scene-canvas">
</canvas>
<br/>
<canvas class="thin-black-border" height="30" width="800" id="scene-controls">
</canvas>

<div id="sprites" class="hideme">
Sprites for<br/> current character:<br/>
</div>

<div id="after-show">
<div id="replay-button" class="button" onclick="playButton()">
Replay
</div>
<div id="make-new-button" class="button" onclick="window.location='moviemaker.htm'">
	Make New
</div>
<div id="edit-button" class="button" onclick="editButton()">
	Edit This
</div>
</div>

</div>

<div id="area1" class="area" class="hideme">
<div id="set-the-scene" >
<b>Set the scene</b>
<br/>

<div >
	Choose an image for the background
	<br/><input id="backdrop-file" ></input>
	<a href="javascript:void(0)" onclick="addBackdrop()">Use image</a>
</div>
<br/>
<div id="set-the-scene-js">
	Or Use JavaScript:
	<br/>
	<textarea id="scene-script">
//draw the sky
movie.scene.context.fillStyle  = "skyblue";
movie.scene.context.fillRect(0, 0, 800, 300)
//draw the ground
movie.scene.context.fillStyle = "green";
movie.scene.context.fillRect(0, 300, 800, 400)
	</textarea>
</div>
</div>


<div id="characters" >
<b>Add characters</b><br/> 
From an image file (URL): 
<br/>
<input id="char-filename"></input>
<a href="javascript:void(0)" onclick="addCharacterFromFile()">add</a>
<br/>
<br/>Or <a href="javascript:void(0)" onclick="addSanta()">Try Santa and Elf!</a>
<br/>
<br/>Or <a href="javascript:void(0)" onclick="showDrawCharactersButton()">Draw Your Own Characters!</a>

<div id="character-list">
</div>
<br/><br/><br/>	
<b>Direct action</b> by selecting characters and drawing where to go  

</div>

<div id="dialog" >
<b>Add this text to the scene</b> 
<br/>
	<input id="dialog-input"></input>
<div id="dialog-list">
</div>
<div id="dialog_instructions"><b>Touch</b> WHEN and WHERE you want the text, and lift up when you want it to disappear.</div>

</div>


<div id="share" >
<div id="sbuttons">
<div id="facebook_button" class="sbutton" onClick="facebookButton()"></div>
<div id="twitter_button" class="sbutton" onClick="twitterButton()"></div>
<div id="email_button" class="sbutton" onClick="emailButton()"></div>
</div>

<b>link</b> to this movie</a>
<input id="new-animation-share"/>
<br/>
<br/>
The <b>JSON</b> for this movie</a>
<input id="get-json"/>
<br/>
<br/>
<a href="javascript:void(0)" onclick="load()">
Load <b>JSON</b></a>
<input id="load-json"/>

</div>

<div id="soundtrack" >
<br/>
<b>Add sound to the scene</b> 
<div id="no-web-audio">
Sorry, but your Web Browser does not support Web Audio API. To hear sounds try Chrome or Safari.
</div>
<div id="soundtrack-instructions">Simply draw on the scene to make sounds. Draw multiple times for overdubs.
<br/><br/>
Up and Down controls the pitch (frequency) and Left and Right controls the stereo panning. Different colors make different sounds.
<br/>
<br/>
<div id="instruments">
<div id="inst-0" class="inst_box" onClick="chooseInstrument(0)">sine<br/>soft<br/>delay</div>
<div id="inst-1" class="inst_box" onClick="chooseInstrument(1)">sine</div>
<div id="inst-2" class="inst_box" onClick="chooseInstrument(2)">sqr<br/>soft</div>
<div id="inst-3" class="inst_box" onClick="chooseInstrument(3)">sqr</div>
<div id="inst-4" class="inst_box" onClick="chooseInstrument(4)">sqr<br/>soft</div>
<div id="inst-5" class="inst_box" onClick="chooseInstrument(5)">sqr</div>
<div id="inst-6" class="inst_box" onClick="chooseInstrument(6)">sqr<br/>soft<br/>delay</div>
<div id="inst-7" class="inst_box" onClick="chooseInstrument(7)">saw<br/>soft</div>
<div id="inst-8" class="inst_box" onClick="chooseInstrument(8)">saw</div>
<div id="inst-9" class="inst_box" onClick="chooseInstrument(9)">saw<br/>soft<br/>delay</div>
<div id="inst-10" class="inst_box" onClick="chooseInstrument(10)">saw<br/>delay</div>
</div>
<div id="bymonadpad">
<a href="http://monadpad.com">monadpad.com</a> - <a href="http://cloudmusiccompany.appspot.com">Cloud Music Company</a>
</div>
</div>
</div>




<div class="area1controls">
<div id="set-the-scene-button" class="button" onclick="setTheSceneButton()">
	Scene
</div>
<div id="characters-button" style="background-color:white;" class="button" onclick="charactersButton()">
	Characters
</div>
<div id="dialog-button" class="button" onclick="dialogButton()">
	Dialog
</div>
<div id="soundtrack-button" class="button" onclick="soundtrackButton()">
	Soundtrack
</div>
<div id="share-button" class="button" onclick="shareButton()">
	Share
</div>
</div>



</div>

<div id="draw-characters">
	<div onclick="addCharacter()" class="button">Add This Character</div>
	<canvas height="200" width="150" id="character-canvas">
	</canvas>

	<a href="javascript:void(0)" onclick="clearCharacterCanvas()">clear</a>
	<a href="javascript:void(0)" onclick="undoCharacterCanvas()">undo</a>
	<br/>
	<div class="button"
		onclick="document.getElementById('draw-characters').style.visibility = 'hidden'">
	Close
	</div>
	<div id="colors">
		<div id="color-0" class="color_box" onclick="chooseColor(0)" style="background-color: rgb(255, 255, 255); "></div>
		<div id="color-1" class="color_box" onclick="chooseColor(1)" style="background-color: rgb(128, 128, 128); "></div>
		<div id="color-2" class="color_box" onclick="chooseColor(2)" style="background-color: rgb(255, 0, 0); "></div>
		<div id="color-3" class="color_box" onclick="chooseColor(3)" style="background-color: rgb(255, 255, 0); "></div>
		<div id="color-4" class="color_box" onclick="chooseColor(4)" style="background-color: rgb(0, 255, 0); "></div>
		<div id="color-5" class="color_box" onclick="chooseColor(5)" style="background-color: rgb(0, 255, 255); "></div>
		<div id="color-6" class="color_box" onclick="chooseColor(6)" style="background-color: rgb(0, 0, 255); "></div>
		<div id="color-7" class="color_box" onclick="chooseColor(7)" style="background-color: rgb(128, 0, 128); "></div>
	</div>
</div>



<!--context.translate(width, 0);
context.scale(-1, 1);-->
</div>
</body>
</html>
